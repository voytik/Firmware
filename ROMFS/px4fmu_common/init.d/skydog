#!nsh
#
# PX4FMU startup script.
 
 
#
# Start terminal
#
if sercon
then
	echo "USB connected"
fi
 
#
# Start the ORB (first app to start)
#
uorb start
 
#
# Load microSD params
#
#if ramtron start
#then
#	param select /ramtron/params
#	if [ -f /ramtron/params ]
#	then
#		param load /ramtron/params
#	fi
#else
	param select /fs/microsd/params
	if [ -f /fs/microsd/params ]
	then
		if param load /fs/microsd/params
		then
			echo "Parameters loaded"
		else
			echo "Parameter file corrupt - ignoring"
		fi
	fi
#fi

param set MAV_TYPE 1
 
#
# Start system state indicator
#
if rgbled start
then
	echo "Using external RGB Led"
else
	if blinkm start
	then
		blinkm systemstate
	fi
fi
 
# Try to get an USB console
nshterm /dev/ttyACM0 &
 
#
# Upgrade PX4IO firmware
#
if px4io detect
then
	echo "PX4IO running, not upgrading"
else
	echo "Attempting to upgrade PX4IO"
	if px4io update
	then
		if [ -d /fs/microsd ]
		then
			echo "Flashed PX4IO Firmware OK" > /fs/microsd/px4io.log
		fi
 
		# Allow IO to safely kick back to app
		usleep 200000
	else
		echo "No PX4IO to upgrade here"
	fi
fi
 
#
# Do not exit the shell per default
#
set EXIT_ON_END no
 
#
# Start and configure PX4IO or FMU interface
#
if px4io detect
then
	# Start MAVLink (depends on orb)
	mavlink start
	usleep 5000
 
	sh /etc/init.d/rc.io
else
	# Start MAVLink (on UART1 / ttyS0)
	mavlink start -d /dev/ttyS0
	usleep 5000
	fmu mode_pwm
	param set BAT_V_SCALING 0.004593
	set EXIT_ON_END yes
fi
 
#
# Start the sensors and test them.
#
sh /etc/init.d/rc.sensors
 
#
# Start logging (depends on sensors)
#
#sh /etc/init.d/rc.logging
 
#
# Start the commander.
#
commander start
 
#
# Start GPS interface (depends on orb)
#
gps start
 
#
# Start the attitude estimator
#
attitude_estimator_ekf start
#attitude_estimator_so3_comp start
 
#
# XXX Start your own apps here
#
set EXIT_ON_END yes
 
if [ $EXIT_ON_END == yes ]
then
	exit
fi